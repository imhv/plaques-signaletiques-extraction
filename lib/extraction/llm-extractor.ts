import { openai } from "@ai-sdk/openai";
import { generateObject } from "ai";
import { z } from "zod";
import type { ExtractionResult } from "../types";

const extractionSchema = z.object({
  brand: z
    .string()
    .optional()
    .describe(
      "La marque ou le nom du fabricant (ex: WHIRLPOOL, SAMSUNG, LG) - TOUJOURS EN MAJUSCULES"
    ),
  product_family: z
    .string()
    .optional()
    .describe(
      "La famille de produit ou type d'appareil √©lectrom√©nager - TOUJOURS EN MAJUSCULES"
    ),
  model_number: z
    .string()
    .optional()
    .describe("Le num√©ro de mod√®le ou code produit"),
  serial_number: z
    .string()
    .optional()
    .describe("Le num√©ro de s√©rie ou identifiant unique"),
  confidence: z
    .object({
      brand: z.number().min(0).max(1).optional(),
      product_family: z.number().min(0).max(1).optional(),
      model_number: z.number().min(0).max(1).optional(),
      serial_number: z.number().min(0).max(1).optional(),
    })
    .optional()
    .describe("Scores de confiance pour chaque champ extrait (0-1)"),
});

// Ajouter un syst√®me de rate limiting
class RateLimiter {
  private requests: number[] = [];
  private tokens: number[] = [];

  constructor(
    private maxRequestsPerMinute: number = 450, // 450 pour √™tre s√ªr
    private maxTokensPerMinute: number = 180000, // 180k pour √™tre s√ªr
    private estimatedTokensPerRequest: number = 1500 // Estimation conservatrice
  ) {}

  async waitIfNeeded(): Promise<void> {
    const now = Date.now();
    const oneMinuteAgo = now - 60000;

    // Nettoyer les anciennes entr√©es
    this.requests = this.requests.filter((time) => time > oneMinuteAgo);
    this.tokens = this.tokens.filter((time) => time > oneMinuteAgo);

    // V√©rifier les limites
    if (this.requests.length >= this.maxRequestsPerMinute) {
      const oldestRequest = Math.min(...this.requests);
      const waitTime = 60000 - (now - oldestRequest) + 1000; // +1s de marge
      console.log(`‚è≥ Rate limit (RPM) reached. Waiting ${waitTime}ms...`);
      await this.sleep(waitTime);
    }

    if (
      this.tokens.length >=
      this.maxTokensPerMinute / this.estimatedTokensPerRequest
    ) {
      const oldestToken = Math.min(...this.tokens);
      const waitTime = 60000 - (now - oldestToken) + 1000;
      console.log(`‚è≥ Rate limit (TPM) reached. Waiting ${waitTime}ms...`);
      await this.sleep(waitTime);
    }

    // Enregistrer cette requ√™te
    this.requests.push(now);
    this.tokens.push(now);
  }

  private sleep(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
}

// Instance globale du rate limiter
const rateLimiter = new RateLimiter();

export async function extractWithLLM(
  imageUrl: string,
  retryCount = 0
): Promise<ExtractionResult> {
  const maxRetries = 3;
  const baseDelay = 2000; // 2 secondes

  try {
    const startTime = Date.now();
    console.log(`ü§ñ Starting LLM extraction at ${new Date().toISOString()}`);

    // Attendre si n√©cessaire pour respecter les limites
    await rateLimiter.waitIfNeeded();

    const result = await generateObject({
      model: openai("gpt-5-mini"),
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: buildExtractionPrompt(),
            },
            {
              type: "image",
              image: imageUrl,
            },
          ],
        },
      ],
      schema: extractionSchema,
    });

    const processingTime = Date.now() - startTime;
    console.log(`‚úÖ LLM extraction completed in ${processingTime}ms`);

    // Handle case where confidence object might be undefined
    const confidence = result.object.confidence || {};

    return {
      brand: result.object.brand,
      product_family: result.object.product_family,
      model_number: result.object.model_number,
      serial_number: result.object.serial_number,
      confidence_scores: {
        brand: confidence.brand,
        product_family: confidence.product_family,
        model_number: confidence.model_number,
        serial_number: confidence.serial_number,
      },
      method: "llm",
      processing_time_ms: processingTime,
      raw_data: {
        llm_response: result.object,
      },
    };
  } catch (error) {
    console.error("LLM extraction failed:", error);

    // Gestion sp√©cifique des erreurs de rate limiting
    if (
      error instanceof Error &&
      error.message.includes("Rate limit") &&
      retryCount < maxRetries
    ) {
      const delay = baseDelay * Math.pow(2, retryCount); // Exponential backoff
      console.log(
        `üîÑ Rate limit hit, retrying in ${delay}ms (attempt ${
          retryCount + 1
        }/${maxRetries})`
      );
      await new Promise((resolve) => setTimeout(resolve, delay));
      return extractWithLLM(imageUrl, retryCount + 1);
    }

    throw error;
  }
}

function buildExtractionPrompt(): string {
  return `Analysez cette image de plaque signal√©tique d'appareil √©lectrom√©nager et extrayez les informations suivantes.

    **INFORMATIONS √Ä EXTRAIRE :**
1. **Marque/Fabricant** - Recherchez les noms d'entreprises comme Whirlpool, Samsung, LG, Bosch, Miele, etc.
2. **Famille de produit/Type** - Le champ le plus important. Recherchez les termes qui indiquent le type d'appareil
3. **Num√©ro de mod√®le** - G√©n√©ralement une combinaison de lettres et de chiffres. souvent apr√®s mod√®le, model, type..
4. **Num√©ro de s√©rie** - Identifiant unique, souvent plus long que les num√©ros de mod√®le. souvent apr√®s nr, serial, serial number, serial#

**R√àGLES D'EXTRACTION DES FAMILLES DE PRODUITS : **
exemple : REFRIGERATEUR, CONGELATEUR, REFRIGERATEUR CONGELATEUR, LAVE-LINGE, SECHE-LINGE, LAVE-VAISSELLE, PLAQUE INDUCTION, FOUR, CUISINIERE, MICRO-ONDES, CAVE A VINS...
Attention le peut etre dans une autre langue toujours la donner en FRANCAIS comme ci desssus.


**R√àGLES SP√âCIALES POUR LES NUM√âROS DE S√âRIE :**
1. **Longueur typique** - G√©n√©ralement 8-20 caract√®res
2. **Format courant** - Souvent tout en chiffres ou m√©lange lettres/chiffres
3. **Attention aux erreurs courantes** :
   - Ne pas tronquer les num√©ros longs
   - Ne pas ajouter des chiffres qui ne sont pas l√†
   - N'√©cris pas sn, serial number, serial# mais le num√©ro de s√©rie lui meme

**R√àGLES DE TRANSCRIPTION CRITIQUES :**
1. **Caract√®res similaires** - Faites tr√®s attention √† :
   - O (lettre) vs 0 (z√©ro) - Dans les codes, souvent des z√©ros
   - I (lettre) vs 1 (un) - Dans les codes, souvent des uns
   - S vs 5, G vs 6, B vs 8
   - V√©rifiez le contexte : les num√©ros de s√©rie sont souvent tout en chiffres
2. **Pr√©cision absolue** - Recopiez EXACTEMENT ce que vous voyez, caract√®re par caract√®re
3. **Double v√©rification** - Relisez chaque caract√®re individuellement

**SCORES DE CONFIANCE :**
- **0.9-1.0** : Texte tr√®s clair, parfaitement lisible
- **0.7-0.8** : Texte lisible avec quelques incertitudes mineures
- **0.5-0.6** : Texte partiellement lisible, quelques caract√®res incertains
- **0.3-0.4** : Texte difficile √† lire, plusieurs caract√®res incertains
- **0.1-0.2** : Texte tr√®s flou, extraction incertaine
- **0.0** : Impossible √† lire ou pas trouv√©

**IMPORTANT :** 
1. N'inventez JAMAIS de donn√©es - mieux vaut NOT_FOUND qu'une erreur
2. **Pr√©cision absolue** - Recopiez EXACTEMENT ce que vous voyez, caract√®re par caract√®re
3. **Double v√©rification** - Relisez chaque caract√®re individuellement

Analysez directement l'image pour extraire ces informations.
`;
}
